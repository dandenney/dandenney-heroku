!!! 5
%html{lang: 'en'}
  %head
    %meta{charset: 'utf-8'}
    %title Adding Haml
    %meta{name: 'viewport', content: 'width=1024, user-scalable=no'}
    %link{href: 'stylesheets/deck.core.css', rel: 'stylesheet', type: 'text/css'}
    %link{href: 'stylesheets/style.css', rel: 'stylesheet', type: 'text/css'}
    %script{src: 'javascripts/modernizr.custom.js', type: 'text/javascript'}
  
  %body.deck-container
  
    / Section - Intro
    
    %section.slide.title-1
      %h1 Adding<br />Haml

    %section.slide.title-me
      .me
        %h3 Nick Walsh
        %p <a href="http://envylabs.com">Envy Labs</a>
        %p <a href="http://twitter.com/nickawalsh">@nickawalsh</a>
  
    %section.slide
      %h2 Adding <em>Haml</em>
      %ul.full
        %li.slide What's Haml?
        %li.slide Who's Responsible?
        %li.slide HTML to Haml
        %li.slide Filters &amp; Server-Side Integration
        %li.slide The Good
        %li.slide The Bad
        %li.slide The Install
  
    %section.slide.title-quote
      %blockquote The three chief virtues of a programmer are: Laziness, Impatience and Hubris.
      %p Larry Wall, co-author <a href="http://shop.oreilly.com/product/9780596000271.do">Programming Perl</a>
  
    %section.slide.title-2
      %h1 What<br />is Haml?
  
    %section.slide.title-base.title-base-1
      %h1 <em>H</em>TML<br /><em>A</em>bstraction<br /><em>M</em>arkup<br /><em>L</em>anguage
  
    %section.slide
      %h2 Function <em>&amp;</em> Features
      %ul.full
        %li.slide Replacement for templating systems like ERB, PHP, and ASP
        %li.slide Follows DRY principles
        %li.slide Strict indenting and whitespace-sensitive
    
    %section.slide.title-3
      %h1 Pre-reqs
    
    %section.slide.title-base.title-base-2
      %h1 HTML
      
    %section.slide.title-4
      %h1 Cumbersome<br />HTML?
      
    %section.slide
      %h2 The <em>First</em> Level
      %ul
        %li.slide.trigger
      %pre.initial
        :preserve
          !!! 5
          %<span class="tag">html</span>{<span class="attr">lang: 'en'</span>}
            %<span class="tag">head</span>
              %<span class="tag">title</span> A Real Human Being
            %<span class="tag">body</span>
              <span class="id">#id.class</span>
                %<span class="tag">h1</span><span class="id">.class</span> And a Real Hero
    
    / Section - History
    
    %section.slide.title-5
      %h1 History
    
    %section.slide.title-quote
      %blockquote All of Hashrocket's new projects are done in Haml, and we've now decided to transition everything else in our portfolio over to Haml as soon as possible.
      %p Obie Fernandez, co-founder <a href="http://hashrocket.com">Hashrocket</a>, author <a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321601661">The Rails Way</a>
      
    %section.slide
      %h2 Who's <em>Responsible</em>
      %ul.full
        %li.slide Original implementation created by Hampton Catlin (also responsible for Sass) in 2006
        %li.slide Current implementation and maintenance by Nathan Weizenbaum
        %li.slide MIT licensed, source (and ability to contribute) at <a href="https://github.com/nex3/haml">github.com/nex3/haml</a>
        %li.slide Originally packaged with Sass
        
    %section.slide.title-quote
      %blockquote
        cleaner and DRY-er<br />
        write HTML haiku<br />
        templating fun. Scraunched*
      %p (Don't worry, this'll be the only haiku.)
    
    / Section - HTML to Haml
      
    %section.slide.title-6
      %h1 HTML<br />to<br />Haml
          
    %section.slide.title-7
      %h1 Won't<br />Someone<br />Think<br />of the<br />Designers?
      
    %section.slide.title-base.title-base-3
      %h1 (They're<br />in the<br />Audience)
      
    %section.slide
      %h2 A Quick <em>Note</em> on the Examples
      %ul.full
        %li.slide <a href="http://sinatrarb.com">Sinatra</a> + <a href="http://imakewebthings.github.com/deck.js/">deck.js</a> (Big thanks to <a href="http://twitter.com/eallam">@eallam</a>)
        %li.slide Output is live generated by the Haml engine
        %li.slide Application and source will be available after the presentation
      
    %section.slide
      %h2 Basic <em>Tags</em>
      %ul
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">h1</span> But You're Still the Same
          
    %section.slide
      %h2 Basic <em>Tags</em>
      %ul
        %li.slide Content can be nested, but the output source will reflect the extra whitespace
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">p</span> Good.
          <mark class="mark-1">%<span class="tag">p</span>
            You're just sayin' that?</mark>
            
    %section.slide
      %h2 <em>Illegal</em> Nesting
      %ul
        %li.slide Content may not be inline and nested, however
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">h3</span> A Real Hero
            <mark class="mark-1">%<span class="tag">b</span> EP</mark>
      
    %section.slide
      %h2 Doctypes
      %ul
        %li A sampling of Haml's <var>doctype</var> shortcuts
        %li.slide.trigger
      %pre.initial
        :preserve
          !!! 5
          +
          !!! Transitional
          +
          !!! XML
      
    %section.slide
      %h2 Attributes
      %ul
        %li.slide Attributes are added via Ruby hashes
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">a</span><mark class="mark-1">{<span class="attr">href: 'http://haml-lang.org', title: 'A Link'</span>}</mark>
            I drive, for movies.
      
    %section.slide
      %h2 IDs <em>&amp;</em> Classes
      %ul
        %li.slide Classes and IDs may also be added via hash
        %li.slide More commonly, though, they're denoted with a CSS selector-like shorthand
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">p</span><mark class="mark-1">{<span class="attr">id: 'id-1', class: 'class'</span>}</mark>
            Is that dangerous?
          %<span class="tag">p</span><mark class="mark-2"><span class="id">#id-2.class</span></mark>
            It's only part time.
      
    %section.slide
      %h2 Multiple <em>Classes</em>
      %ul
        %li.slide More than one class may be added in this manner
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">p</span><mark class="mark-1"><span class="id">.class-1.class-2</span></mark>
            Hey kid, you want a toothpick?
      
    %section.slide
      %h2 <em>Divs</em> Aplenty
      %ul
        %li.slide <var>div</var> tags can be denoted like other tags
        %li.slide If you only include a class or ID, the engine will assume you want a <var>div</var>
        %li.slide Attributes can still be passed to the shorthand version
        %li.slide.trigger
      %pre.initial
        :preserve
          <mark class="mark-1">%<span class="tag">div</span><span class="id">.class</span></mark>
            Sorry about the noise.
          <mark class="mark-2"><span class="id">.class</span></mark>
            I was gonna call the cops.
          <mark class="mark-3"><span class="id">.class</span>{<span class="attr">rel: 'lightbox'</span>}</mark>
            I wish you would.
      
    %section.slide
      %h2 Nesting
      %ul
        %li Like content, use two spaces to nest tags within other tags
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">header</span>
            %<span class="tag">h1</span> Bum Bum Bum
            %<span class="tag">h2</span> Dum Dum Dum
            %<span class="tag">nav</span>
              %<span class="tag">a</span>{<span class="attr">href: '#', title: 'A Link'</span>}
                Wub Wub Wub
      
    %section.slide
      %h2 Comments (<em>HTML</em>)
      %ul
        %li HTML comments are created with a <var>/</var>
        %li.slide.trigger
      %pre.initial
        :preserve
          <span class="comment">/ A standard comment</span>
      
    %section.slide
      %h2 Comments (<em>Conditional</em>)
      %ul
        %li.slide IE conditional comments utilize their normal syntax, and tags/content can be nested within
        %li.slide.trigger
      %pre.initial
        :preserve
          <span class="comment">/ <mark class="mark-1">[lte IE8]</mark></span>
            %<span class="tag">h1</span> Congratulations!
          
    %section.slide
      %h2 Comments (<em>Haml</em>)
      %ul
        %li.slide Haml comments, denoted with <var>-#</var>, and elements nested within are not part of the output
        %li.slide.trigger
      %pre.initial
        :preserve
          <span class="comment"><mark class="mark-1">-#</mark> %section</span>
            %<span class="tag">p</span>
              %<span class="tag">em</span> First!
      
    %section.slide
      %h2 <em>Self-Closing</em> Tags
      %ul
        %li.slide Tags that should self-close can be denoted with a trailing <var>/</var>
        %li.slide Haml has a default set of tags, however, that are automatically self-closed
        %li.slide.trigger
      %pre.initial
        :preserve
          <mark class="mark-1">%<span class="tag">br</span>/</mark>
          <mark class="mark-2">%<span class="tag">br</span></mark>
    
    / Section - Filters & Server-Side
      
    %section.slide.title-8
      %h1 Filters Everywhere
      
    %section.slide
      %h2 Haml <em>Filters</em>
      %ul.full
        %li.slide Allow for blocks of code/content to be filtered outside of Haml then added to Haml's output
        %li.slide Examples include <var>:javascript</var>, <var>:markdown</var>, <var>:css</var>, <var>:escaped</var>
        
    %section.slide
      %h2 <em>JavaScript</em> Filter
      %ul
        %li.slide Rather than embedding JavaScript on your page via <var>&lt;script&gt;</var> tags, it can be placed within Haml's <var>:javascript</var> filter
        %li.slide.trigger
      %pre.initial
        :preserve
          <mark class="mark-1"><span class="filter">:javascript</span></mark>
            var x = 42;
            alert(x);
              
    %section.slide.title-9
      %h1 Adding<br />the<br />Server<br />Side
    
    %section.slide
      %h2 Embedding <em>Ruby</em>
      %ul
        %li.slide A line beginning with <var>-</var> will be executed as normal Ruby (think <var>&lt;% %&gt;</var> in ERB or <var>&lt;? ?&gt;</var> in PHP)
        %li.slide A line with <var>=</var> will output the evaluated result (think <var>&lt;%= %&gt;</var> in ERB or <var>&lt;?= ?&gt;</var> in PHP)
        %li.slide.trigger
      %pre.initial
        :preserve
          <mark class="mark-1">- color = "green"</mark>
          <mark class="mark-2">= color</mark>
          
    %section.slide
      %h2 Embedding <em>Ruby</em>
      %ul
        %li.slide Constructs like <var>if</var> and <var>each</var> can be used. Note that these blocks do not need a manual <var>end</var> in Haml
        %li.slide.trigger
      %pre.initial
        :preserve
          - color = "green"
          <mark class="mark-1">- if color == "green"</mark>
            = color
    
    / Section - The Good  
      
    %section.slide.title-10
      %h1 The Good
      
    %section.slide
      %h2 So, Haml's Kinda <em>Great</em>
      %ul.full
        %li.slide Reduces repetition
        %li.slide Reduces effort
        %li.slide Easier to scan and maintain
        
    %section.slide
      %h2 <em>Universal</em> Selectors
      %ul.full
        %li.slide
          %h3 Haml
          %pre
            :preserve
              <span class="id">.class</span>
        %li.slide
          %h3 CSS
          %pre
            :preserve
              <span class="id">.class</span> { width: 200px; }
        %li.slide
          %h3 jQuery
          %pre
            :preserve
              $('<span class="id">.class</span>').fadeIn();
          
    %section.slide
      %h2 Uniformity
      %h3 Reduces Instances of This:
      %pre
        :preserve
          &lt;div&gt;
            &lt;h1&gt;A Title&lt;/h1&gt;
          &lt;form&gt;
            &lt;p&gt;
            &lt;label&gt;A Label&lt;/label&gt;
            &lt;input type="text" id="input" /&gt;
              &lt;/p&gt;
          &lt;/form&gt;
          &lt;/div&gt;
          
    %section.slide.title-base
      %h1 (They'll Probably See This at Some Point)
    
    / Section - The Bad
    
    %section.slide.title-11
      %h1 The Bad
      
    %section.slide.title-base.title-base-4
      %h1 Haml is <em>Not</em> for Content Formatting
      
    %section.slide
      %h2 Content <em>Formatting</em>
      %ul
        %li.slide Attempting to use inline tags inside long blocks of content proves troublesome
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">p</span>
            Call me Ishmael.
            <mark class="mark-1">%<span class="tag">span</span> Some years ago &mdash;</mark>
            never mind how long 
            <mark class="mark-1">%<span class="tag">em</span> precisely</mark>
        
    %section.slide
      %h2 Content <em>Formatting</em>
      %ul
        %li.slide One possible solution is to use standard HTML
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">p</span>
            Call me <mark class="mark-1"><span class="tag">&lt;em&gt;</span>Ishmael<span class="tag">&lt;/em&gt;</span></mark>. Some years ago &hellip;
        
    %section.slide
      %h2 Markdown
      %ul
        %li For more content formatting control, using the <var>:markdown</var> filter or similar is preferred
        %li.slide Requires markdown is installed on your server: <a href="http://daringfireball.net/projects/markdown/">daringfireball.net/projects/markdown</a>
        %li.slide.trigger
      %pre.initial
        :preserve
          <span class="filter">:markdown</span>
            ## Heading 2
            1. List Item 1
            2. List *Item 2*
            
            [A Link](http://haml-lang.org)
        
    %section.slide.title-base
      %h1 Cleaning Up Output
        
    %section.slide
      %h2 Multiline
      %ul
        %li.slide Use of <var>|</var> causes multiple lines to be evaluated as one
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">p</span>
            noiseless nautilus,
            light prows
          %<span class="tag">p</span>
            noiseless nautilus, <mark class="mark-1">|</mark>
            light prows <mark class="mark-1">|</mark>
        
    %section.slide
      %h2 Whitespace (<em>Inside</em>)
      %ul
        %li.slide Use of <var>&lt;</var> removes whitespace within a tag
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">h1</span>
            %<span class="tag">span</span> The Pacific
          %<span class="tag">h1</span><mark class="mark-1"><</mark>
            %<span class="tag">span</span> The Symphony
        
    %section.slide
      %h2 Whitespace (<em>Outside</em>)
      %ul
        %li.slide Use of <var>&gt;</var> removes whitespace outside of a tag
        %li.slide.trigger
      %pre.initial
        :preserve
          %<span class="tag">h1</span>
            %<span class="tag">b</span> The
            %<span class="tag">em</span><mark class="mark-1">></mark> Chase
            First
        
    %section.slide
      %h2 Whitespace (<em>Both</em>)
      %ul
        %li.slide Both may be used to remove whitespace inside and out
        %li.slide.trigger
      %pre.initial
        :preserve
          <span class="id">.class</span>
            %<span class="tag">h1</span><mark class="mark-1">><</mark>
              %<span class="tag">span</span> Title
              
    %section.slide.title-base
      %h1 It's a Little<br />Slower<em>*</em>
      
    %section.slide{'data-ugly' => 'true'}
      %h2 The <em>Ugly</em> Option
      %ul
        %li.slide If Haml's <var>:ugly</var> option is set to <var>true</var>, Haml won't indent/format its output
        %li.slide Default in production mode of Rails
        %li.slide.trigger
      %pre.initial
        :preserve
          !!! 5
          %<span class="tag">html</span>{<span class="attr">lang: 'en'</span>}
            %<span class="tag">head</span>
              %<span class="tag">title</span> A Real Human Being
            %<span class="tag">body</span>
              <span class="id">#id.class</span>
                %<span class="tag">h1</span><span class="id">.class</span> And a Real Hero
        
    %section.slide.title-base
      %h1 Probably <em>Not</em> for Your Small Site
    
    / Section - The Install
      
    %section.slide.title-12
      %h1 The Install
      
    %section.slide
      %h2 So, You're <em>On Board</em>
      %ul.full
        %li Tinkerbin (<a href="http://tinkerbin.com">tinkerbin.com</a>) is a browser-based tool similar to jsFiddle that includes Haml support.
        
    %section.slide
      %h2 <em>Basic</em> Usage
      %ul.full
        %li.slide You'll need Ruby (<a href="http://ruby-lang.org">ruby-lang.org</a>) installed to use Haml &mdash; it's pre-installed on Macs
        %li.slide
          %h3 From the Command Line
          %pre gem install haml
        %li.slide
          %h3 Compile When You're Finished
          %pre haml input.haml output.html
        %li.slide Useful for testing and familiarizing, but inefficient for a full site and maintenance
          
    %section.slide
      %h2 <em>Static Site</em> Usage
      %ul.full
        %li.slide A number of static site generators exist that allow easy use of templating languages like Haml, Sass, and CoffeeScript
        %li.slide Middleman (<a href="http://middlemanapp.com/">middlemanapp.com</a>)
        %li.slide nanoc (<a href="http://nanoc.stoneship.org/">nanoc.stoneship.org</a>)
        %li.slide Require some setup
        
    %section.slide
      %h2 Rails
      %ul.full
        %li.slide Most common usage
        %li.slide
          %h3 Add to Your <var>Gemfile</var>
          %pre gem "haml"
        %li.slide After running bundler (or other preferred gem management technique), you can use the <var>.html.haml</var> extension on view files
        
    %section.slide.title-base
      %h1 What About<br />My Favorite<br />Language?
      
    %section.slide
      %h2 Syntax <em>Highlighting</em>
      %ul.full
        %li Visit the Haml Editor Support page (<a href="http://haml-lang.com/editors.html">haml-lang.com/editors.html</a>) for links to popular bundles to editors like TextMate, Coda, Vim and Emacs.
      
    %section.slide
      %h2 Resources &amp; <em>Credits</em>
      %ul.full.credits
        %li
          %h3 Haml
          %p &bull; <a href="haml-lang.org">haml-lang.org</a>
        %li
          %h3 This Presentation
          %p &bull; <a href="http://addinghaml.heroku.com">addinghaml.heroku.com</a>
          %p &bull; <a href="https://github.com/nickawalsh/addinghaml">github.com/nickawalsh/addinghaml</a>
          %p &bull; <a href="http://sinatrarb.com">Sinatra</a> &amp; <a href="http://imakewebthings.github.com/deck.js/">deck.js</a>
        %li
          %h3 Images
          %p &bull; <a href="http://flickr.com/photos/nypl/sets/72157610903925533/">1930s New York (New York Public Library)</a>
          %p &bull; <a href="http://ology.com/sites/default/files/lukeesb1.jpg">Mark Hamill</a>
          %p &bull; <a href="http://blog.postcardgallery.net/i/pics/dorothy-hamill-1976.jpg">Dorothy Hamill</a>
        %li
          %h3 Give Ruby a Shot
          %p &bull; <a href="http://tryruby.org">tryruby.org</a>
      
    %section.slide.title-13
      %h1 Thanks!
    
    %script{src: 'javascripts/jquery-1.7.min.js', type: 'text/javascript'}
    %script{src: 'javascripts/deck.core.js', type: 'text/javascript'}
    %script{src: 'javascripts/deck.hash.js', type: 'text/javascript'}
    %script{src: 'javascripts/sh_main.min.js', type: 'text/javascript'}
    %script{src: 'javascripts/sh_html.min.js', type: 'text/javascript'}
    %script{src: 'javascripts/application.js', type: 'text/javascript'}
